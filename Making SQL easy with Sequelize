//DATABASE
// const mysql = require('mysql2')

const  Sequelize  = require("sequelize");

// const pool = mysql.createPool({
//     host:'localhost',
//     user:'root',
//     database:'node-complete1',
//     password:'Abhirama@123' 
// })

// module.exports=pool.promise()

const sequelize = new Sequelize('node-complete1','root','Abhirama@123',{
    dialect:'mysql',
    host:'localhost'
})

module.exports=sequelize;

//APP
const path = require('path');

const express = require('express');
const bodyParser = require('body-parser');

const errorController = require('./controllers/error');

const sequelize = require('./util/database.js')

const app = express();

app.set('view engine', 'ejs');
app.set('views', 'views');

const adminRoutes = require('./routes/admin');
const shopRoutes = require('./routes/shop');

app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.static(path.join(__dirname, 'public')));

app.use('/admin', adminRoutes);
app.use(shopRoutes);

// db.execute('SELECT * FROM products').then(result=>{
//     console.log(result)
// }).catch()

app.use(errorController.get404);

sequelize.sync().then(
    result=>{console.log(result)
        app.listen(3000);}
).catch(err=>console.log(err))




//MODEL PRODUCT
// const fs = require('fs');
// const path = require('path');

const Cart = require('./cart')

// const p = path.join(
//   path.dirname(process.mainModule.filename),
//   'data',
//   'products.json'
// );

// const getProductsFromFile = cb => {
//   fs.readFile(p, (err, fileContent) => {
//     if (err) {
//       cb([]);
//     } else {
//       cb(JSON.parse(fileContent));
//     }
//   });
// };

// module.exports = class Product {
//   constructor(id,title, imageUrl, description, price) {
//     this.id = id;
//     this.title = title;
//     this.imageUrl = imageUrl;
//     this.description = description;
//     this.price = price;
//   }

//   save() {
    
//     getProductsFromFile(products => {
//       if(this.id){
//         const existingProductIndex=products.findIndex(prod=>prod.id===this.id);
//         let updatedProducts=[...products];
//         updatedProducts[existingProductIndex]=this;
//         fs.writeFile(p, JSON.stringify(updatedProducts), err => {
//           console.log(err);
//         });
//       }else{
//         this.id = Math.random().toString()
//         products.push(this);
//         fs.writeFile(p, JSON.stringify(products), err => {
          
//         });
//       }
     
//     });
//   }

//   static deleteById(id){
//     getProductsFromFile(products=>{
      
//       const product = products.find(p=>p.id===id)
//       const updatedProduct = products.filter(p=>p.id!==id)
//       fs.writeFile(p,(JSON.stringify(updatedProduct),err=>{
//         if(!err){
//           Cart.deleteProduct(id,product)
//         }
//       }))

//     })
    
//   }

//   static fetchAll(cb) {
//     getProductsFromFile(cb);
//   }

//   static findById(id,cb){
//     getProductsFromFile(products=>{
      
//       const product = products.find(p=>p.id===id)
      
//       cb(product)
//     })
//   }
// };

// const db=require('../util/database')

// const getProductsFromFile = cb => {
// };

// module.exports = class Product {
//   constructor(id,title, imageUrl, description, price) {
//     this.id = id;
//     this.title = title;
//     this.imageUrl = imageUrl;
//     this.description = description;
//     this.price = price;
//   }

//   save() {
//     console.log([this.title,this.price,this.imageUrl,this.description])
//     return  db.execute('INSERT INTO products (title,price,imageUrl,descripption) VALUES (?,?,?,?)',
//     [this.title,this.price,this.imageUrl,this.description])
    
//   }

//   static deleteById(id){
    
    
//   }

//   static fetchAll() {
//     return db.execute('SELECT * FROM products');
//   }

//   static findById(id){
//     return db.execute('SELECT * FROM products WHERE products.id=?',[id])
//   }
// };

const Sequelize = require('sequelize')

const sequelize = require('../util/database')

const Product=sequelize.define('product',{
  id:{
    type:Sequelize.INTEGER,
    autoIncrement:true,
    allowNull:false,
    primaryKey:true
  },
  title:Sequelize.STRING,
  price:{
    type:Sequelize.DOUBLE,
    allowNull:false
  },
  imageUrl:{
    allowNull:false,
    type:Sequelize.STRING
  },
  descreption:{
    type:Sequelize.STRING,
    allowNull:false
  }

})

module.exports=Product
