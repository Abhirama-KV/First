//MODEL CART
const fs = require('fs')
const path = require('path')

const p = path.join(path.dirname(process.mainModule.filename),
                'data',
                'cart.json')

module.exports = class Cart{
static addProduct(id,productPrice){
    fs.readFile(p,(err,fileContent)=>{
        let cart = {products:[],totalPrice:0}
        if(!err){
            cart = JSON.parse(fileContent)
        }
        const existingProductIndex = cart.products.findIndex(p=> p.id==id )
        const existingProduct = cart.products[existingProductIndex]
        let updatedProduct
        if(existingProduct){
            updatedProduct = {...existingProduct}
            updatedProduct.qty = updatedProduct.qty+1;
            cart.products = [...cart.products]
            cart.products[existingProductIndex] = updatedProduct
        }else{
            updatedProduct = { id:id,qty:1 }
            cart.products = [...cart.products,updatedProduct]
        }
        cart.totalPrice += +AproductPrice
        fs.writeFile(p,JSON.stringify(cart),(err)=>{
            console.log(err)
        })
    })
}

static deleteProduct(id,productPrice){
    fs.readFile(p,(err,fileContent)=>{
        if(err){
            return;
        }
        const updatedProduct={ ...fileContent }
        const product=updatedProduct.products.find(p=>p.id === id)
        updatedCart.products = updatedCart.products.filter(p=>p.id!==id)
        const productQty=product.qty;
        updatedProduct.totalPrice=updatedProduct.totalPrice - productPrice * productQty;

        fs.writeFile(p,JSON.stringify(updatedCart),err=>{
            console.log(err)
        })
    })
}

}


//MODEL PRODUCT
const fs = require('fs');
const path = require('path');

const Cart = require('./cart')

const p = path.join(
  path.dirname(process.mainModule.filename),
  'data',
  'products.json'
);

const getProductsFromFile = cb => {
  fs.readFile(p, (err, fileContent) => {
    if (err) {
      cb([]);
    } else {
      cb(JSON.parse(fileContent));
    }
  });
};

module.exports = class Product {
  constructor(id,title, imageUrl, description, price) {
    this.id = id;
    this.title = title;
    this.imageUrl = imageUrl;
    this.description = description;
    this.price = price;
  }

  save() {
    
    getProductsFromFile(products => {
      if(this.id){
        const existingProductIndex=products.findIndex(prod=>prod.id===this.id);
        let updatedProducts=[...products];
        updatedProducts[existingProductIndex]=this;
        fs.writeFile(p, JSON.stringify(updatedProducts), err => {
          console.log(err);
        });
      }else{
        this.id = Math.random().toString()
        products.push(this);
        fs.writeFile(p, JSON.stringify(products), err => {
          
        });
      }
     
    });
  }

  static deleteById(id){
    getProductsFromFile(products=>{
      
      const product = products.find(p=>p.id===id)
      const updatedProduct = products.filter(p=>p.id!==id)
      fs.writeFile(p,(JSON.stringify(updatedProduct),err=>{
        if(!err){
          Cart.deleteProduct(id,product)
        }
      }))

    })
    
  }

  static fetchAll(cb) {
    getProductsFromFile(cb);
  }

  static findById(id,cb){
    getProductsFromFile(products=>{
      
      const product = products.find(p=>p.id===id)
      
      cb(product)
    })
  }
};


//CONTROLLER ADMIN
const Product = require('../models/product');

exports.getAddProduct = (req, res, next) => {
  res.render('admin/edit-product', {
    pageTitle: 'Add Product',
    path: '/admin/add-product',
    editing:false
  });
};

exports.postAddProduct = (req, res, next) => {
  const id = null;
  const title = req.body.title;
  const imageUrl = req.body.imageUrl;
  const price = req.body.price;
  const description = req.body.description;
  const product = new Product(null,title, imageUrl, description, price);
  product.save();
  res.redirect('/');
};

exports.getEditProduct = (req, res, next) => {
  // const editMode = req.query.edit;
  // console.log(editMode)
  // if(!editMode){
  //   return res.redirect('/')
  // }

  const prodId = req.params.productId;

  Product.findById(prodId,product=>{
    if(!product){
      return res.redirect('/')
    }
    res.render('admin/edit-product', {
      pageTitle: 'edit Product',
      path: '/admin/edit-product',
      editing:true,
      product:product
    });
  })

};

exports.postEditProduct = (req,res,next)=>{
  const prodId=req.body.productId;
  const updatedTitle=req.body.title;
  const updatedPrice=req.body.price;
  const updatedImageUrl=req.body.ImageUrl;
  const updatedDescription=req.body.description;

  const updatedProduct=new Product(prodId,updatedTitle,updatedImageUrl,updatedDescription,updatedPrice)
  updatedProduct.save()
  res.redirect('/admin/products')
}

exports.postDelete=(req,res,next)=>{
  const prodId=req.body.productId;
  console.log(prodId)
  Product.deleteById(prodId)

  res.redirect('/admin/products')
}

exports.getProducts = (req, res, next) => {
  Product.fetchAll(products => {
    res.render('admin/products', {
      prods: products,
      pageTitle: 'Admin Products',
      path: '/admin/products'
    });
  });
};
